/* background-color */
$background-color-default: rgba(0, 0, 0, .04) !default;
$background-color-mask: rgba(0, 0, 0, .45) !default;
$background-color-shadow: $background-color-mask;
$background-color-divider: rgba(0, 0, 0, .09) !default;
$background-color-table-header: rgba(0, 0, 0, .02) !default;
$background-color-default-inverse: rgba(255, 255, 255, .09) !default;
$background-color-divider-inverse: rgba(255, 255, 255, .15) !default;
$background-color-table-header-inverse: rgba(255, 255, 255, .04) !default;

@mixin m-background-color-transition($duration: 280ms, $easing: cubic-bezier(.4, 0, .2, 1)) {
  transition: background-color $duration $easing;
  will-change: background-color;
}

@mixin m-background-color($background-color: null) {
  @if ($background-color == null) {
    @include m-background-color-reset();
  } @else {
    background-color: $background-color !important;
  }
}

@mixin m-background-color-transparent() {
  @include m-background-color($color-transparent);
}

@mixin m-background-color-reset() {
  &,
  .light & {
    background-color: $background-color-default;
  }

  .dark & {
    background-color: $background-color-default-inverse;
  }
}


/* border-color */
$border-color-default: rgba(0, 0, 0, .15) !default;
$border-color-default-inverse: rgba(255, 255, 255, .25) !default;

@mixin m-border-color($border-color: null) {
  @if ($border-color == null) {
    @include m-border-color-reset();
  } @else {
    border-color: $border-color !important;
  }
}

@mixin m-border-color-reset() {
  &,
  .light & {
    border-color: $border-color-default;
  }

  .dark & {
    border-color: $border-color-default-inverse;
  }
}

@mixin m-border-top-color($border-top-color: null) {
  @if ($border-top-color == null) {
    &,
    .light & {
      border-top-color: $border-color-default;
    }

    .dark & {
      border-top-color: $border-color-default-inverse;
    }
  } @else {
    border-top-color: $border-top-color !important;
  }
}

@mixin m-border-right-color($border-right-color: null) {
  @if ($border-right-color == null) {
    &,
    .light & {
      border-right-color: $border-color-default;
    }

    .dark & {
      border-right-color: $border-color-default-inverse;
    }
  } @else {
    border-right-color: $border-right-color !important;
  }
}

@mixin m-border-bottom-color($border-bottom-color: null) {
  @if ($border-bottom-color == null) {
    &,
    .light & {
      border-bottom-color: $border-color-default;
    }

    .dark & {
      border-bottom-color: $border-color-default-inverse;
    }
  } @else {
    border-bottom-color: $border-bottom-color !important;
  }
}

@mixin m-border-left-color($border-left-color: null) {
  @if ($border-left-color == null) {
    &,
    .light & {
      border-left-color: $border-color-default;
    }

    .dark & {
      border-left-color: $border-color-default-inverse;
    }
  } @else {
    border-left-color: $border-left-color !important;
  }
}

@mixin m-border-color-transparent() {
  @include m-border-color($color-transparent);
}

@mixin m-border-top-color-transparent() {
  @include m-border-top-color($color-transparent);
}

@mixin m-border-right-color-transparent() {
  @include m-border-right-color($color-transparent);
}

@mixin m-border-bottom-color-transparent() {
  @include m-border-bottom-color($color-transparent);
}

@mixin m-border-left-color-transparent() {
  @include m-border-left-color($color-transparent);

}


/* border-style */
$border-style-none: none;
$border-style-hidden: hidden;
$border-style-default: solid;
$border-style-solid: solid;
$border-style-dashed: dashed;
$border-style-double: double;
$border-style-dotted: dotted;

@mixin m-border-style($border-style: $border-style-default) {
  border-style: $border-style;
}

@mixin m-border-top-style($border-top-style: null) {
  border-top-style: if($border-top-style == null, $border-style-default, $border-top-style);
}

@mixin m-border-right-style($border-right-style: null) {
  border-right-style: if($border-right-style == null, $border-style-default, $border-right-style);
}

@mixin m-border-bottom-style($border-bottom-style: null) {
  border-bottom-style: if($border-bottom-style == null, $border-style-default, $border-bottom-style);
}

@mixin m-border-left-style($border-left-style: null) {
  border-left-style: if($border-left-style == null, $border-style-default, $border-left-style);
}

@mixin m-border-style-none() {
  @include m-border-style($border-style-none);
}

@mixin m-border-top-style-none() {
  border-top-style: $border-style-none;
}

@mixin m-border-right-style-none() {
  border-right-style: $border-style-none;
}

@mixin m-border-bottom-style-none() {
  border-bottom-style: $border-style-none;
}

@mixin m-border-left-style-none() {
  border-left-style: $border-style-none;
}

@mixin m-border-style-reset() {
  @include m-border-style();
}


/* border-width */
$border-width-base: 1 !default;
$border-width-scale: $scale !default;
$border-width-default: $border-width-base * $border-width-scale + $unit;

@mixin m-border-width($border-width: $border-width-default) {
  border-width: $border-width;
}

@mixin m-border-top-width($border-top-width: null) {
  border-top-width: if($border-top-width == null, $border-width-default, $border-top-width);
}

@mixin m-border-right-width($border-right-width: null) {
  border-right-width: if($border-right-width == null, $border-width-default, $border-right-width);
}

@mixin m-border-bottom-width($border-bottom-width: null) {
  border-bottom-width: if($border-bottom-width == null, $border-width-default, $border-bottom-width);
}

@mixin m-border-left-width($border-left-width: null) {
  border-left-width: if($border-left-width == null, $border-width-default, $border-left-width);
}

@mixin m-border-width-none() {
  @include m-border-width(0);
}

@mixin m-border-top-width-none() {
  border-top-width: 0;
}

@mixin m-border-right-width-none() {
  border-right-width: 0;
}

@mixin m-border-bottom-width-none() {
  border-bottom-width: 0;
}

@mixin m-border-left-width-none() {
  border-left-width: 0;
}

@mixin m-border-width-reset() {
  @include m-border-width();
}


/* border */
@mixin m-border(
  $border-color: null,
  $border-style: $border-style-default,
  $border-width: $border-width-default
) {
  @include m-border-color($border-color);
  @include m-border-style($border-style);
  @include m-border-width($border-width);
}

@mixin m-border-reset() {
  @include m-border();
}

@mixin m-border-top(
  $border-top-color: null,
  $border-top-style: $border-style-default,
  $border-top-width: $border-width-default
) {
  @include m-border-top-color($border-top-color);
  @include m-border-top-style($border-top-style);
  @include m-border-top-width($border-top-width);
}

@mixin m-border-top-reset() {
  @include m-border-top();
}

@mixin m-border-right(
  $border-right-color: null,
  $border-right-style: $border-style-default,
  $border-right-width: $border-width-default
) {
  @include m-border-right-color($border-right-color);
  @include m-border-right-style($border-right-style);
  @include m-border-right-width($border-right-width);
}

@mixin m-border-right-reset() {
  @include m-border-right();
}

@mixin m-border-bottom(
  $border-bottom-color: null,
  $border-bottom-style: $border-style-default,
  $border-bottom-width: $border-width-default
) {
  @include m-border-bottom-color($border-bottom-color);
  @include m-border-bottom-style($border-bottom-style);
  @include m-border-bottom-width($border-bottom-width);
}

@mixin m-border-bottom-reset() {
  @include m-border-bottom();
}

@mixin m-border-left(
  $border-left-color: null,
  $border-left-style: $border-style-default,
  $border-left-width: $border-width-default
) {
  @include m-border-left-color($border-left-color);
  @include m-border-left-style($border-left-style);
  @include m-border-left-width($border-left-width);
}

@mixin m-border-left-reset() {
  @include m-border-left();
}

@mixin m-border-none() {
  border: none;
}

@mixin m-border-top-none() {
  border-top: none;
}

@mixin m-border-right-none() {
  border-right: none;
}

@mixin m-border-bottom-none() {
  border-bottom: none;
}

@mixin m-border-left-none() {
  border-left: none;
}

/* border-radius */
$border-radius-base: 8 !default;
$border-radius-step: 2 !default;
$border-radius-scale: $scale !default;

@function f-get-border-radius($diff) {
  @return (($border-radius-base + $border-radius-step * $diff) * $border-radius-scale) + $unit;
}

$border-radius-0: 0;
$border-radius-none: 0;
$border-radius-half: 50%;
$border-radius-xxxs: f-get-border-radius(-4); /* 默认 0 */
$border-radius-xxs: f-get-border-radius(-3); /* 默认 4 */
$border-radius-xs: f-get-border-radius(-2); /* 默认 8 */
$border-radius-sm: f-get-border-radius(-1); /* 默认 12 */
$border-radius-md: f-get-border-radius(0); /* 默认 16 */
$border-radius-lg: f-get-border-radius(1); /* 默认 20 */
$border-radius-xl: f-get-border-radius(2); /* 默认 24 */
$border-radius-xxl: f-get-border-radius(3); /* 默认 28 */
$border-radius-xxxl: f-get-border-radius(4); /* 默认 32 */

@mixin m-border-radius($border-radius: $border-radius-xs) {
  border-radius: $border-radius;
}

@mixin m-border-top-left-radius($border-top-left-radius: null) {
  border-top-left-radius: if($border-top-left-radius == null, $border-radius-xs, $border-top-left-radius);
}

@mixin m-border-top-right-radius($border-top-right-radius: null) {
  border-top-right-radius: if($border-top-right-radius == null, $border-radius-xs, $border-top-right-radius);
}

@mixin m-border-bottom-right-radius($border-bottom-right-radius: null) {
  border-bottom-right-radius: if($border-bottom-right-radius == null, $border-radius-xs, $border-bottom-right-radius);
}

@mixin m-border-bottom-left-radius($border-bottom-left-radius: null) {
  border-bottom-left-radius: if($border-bottom-left-radius == null, $border-radius-xs, $border-bottom-left-radius);
}

@mixin m-border-radius-none() {
  @include m-border-radius($border-radius-none);
}

@mixin m-border-top-left-radius-none() {
  border-top-left-radius: $border-radius-none;
}

@mixin m-border-top-right-radius-none() {
  border-top-right-radius: $border-radius-none;
}

@mixin m-border-bottom-right-radius-none() {
  border-bottom-right-radius: $border-radius-none;
}

@mixin m-border-bottom-left-radius-none() {
  border-bottom-left-radius: $border-radius-none;
}

@mixin m-border-radius-reset() {
  @include m-border-radius();
}

/* outline */
$outline-color: $primary-color;

/* box-shadow，跟随 Material Design */
$box-shadow-offset-x-scale: $scale !default;
$box-shadow-offset-y-scale: $scale !default;
$box-shadow-blur-radius-scale: $scale !default;
$box-shadow-spread-radius-scale: $scale !default;
$box-shadow-umbra-color: rgba(0, 0, 0, .2) !default;
$box-shadow-penumbra-color: rgba(0, 0, 0, .14) !default;
$box-shadow-ambient-color: rgba(0, 0, 0, .12) !default;

@function f-get-box-shadow($offset-x, $offset-y, $blur-radius, $spread-radius, $color) {
  $offset-x: $offset-x * $box-shadow-offset-x-scale;
  $offset-x: if($offset-x <= 0, 0, $offset-x + $unit);
  $offset-y: $offset-y * $box-shadow-offset-y-scale;
  $offset-y: if($offset-y <= 0, 0, $offset-y + $unit);
  $blur-radius: $blur-radius * $box-shadow-blur-radius-scale;
  $blur-radius: if($blur-radius <= 0, 0, $blur-radius + $unit);
  $spread-radius: $spread-radius * $box-shadow-spread-radius-scale;
  $spread-radius: if($spread-radius <= 0, 0, $spread-radius + $unit);
  @return ($offset-x $offset-y $blur-radius $spread-radius $color);
}

$box-shadow-umbra-map: (
  0: f-get-box-shadow(0, 0, 0, 0, $box-shadow-umbra-color),
  1: f-get-box-shadow(0, 2, 1, -1, $box-shadow-umbra-color),
  2: f-get-box-shadow(0, 3, 1, -2, $box-shadow-umbra-color),
  3: f-get-box-shadow(0, 3, 3, -2, $box-shadow-umbra-color),
  4: f-get-box-shadow(0, 2, 4, -1, $box-shadow-umbra-color),
  5: f-get-box-shadow(0, 3, 5, -1, $box-shadow-umbra-color),
  6: f-get-box-shadow(0, 3, 5, -1, $box-shadow-umbra-color),
  7: f-get-box-shadow(0, 4, 5, -2, $box-shadow-umbra-color),
  8: f-get-box-shadow(0, 5, 5, -3, $box-shadow-umbra-color),
  9: f-get-box-shadow(0, 5, 6, -3, $box-shadow-umbra-color),
  10: f-get-box-shadow(0, 6, 6, -3, $box-shadow-umbra-color),
  11: f-get-box-shadow(0, 6, 7, -4, $box-shadow-umbra-color),
  12: f-get-box-shadow(0, 7, 8, -4, $box-shadow-umbra-color),
  13: f-get-box-shadow(0, 7, 8, -4, $box-shadow-umbra-color),
  14: f-get-box-shadow(0, 7, 9, -4, $box-shadow-umbra-color),
  15: f-get-box-shadow(0, 8, 9, -5, $box-shadow-umbra-color),
  16: f-get-box-shadow(0, 8, 10, -5, $box-shadow-umbra-color),
  17: f-get-box-shadow(0, 8, 11, -5, $box-shadow-umbra-color),
  18: f-get-box-shadow(0, 9, 11, -5, $box-shadow-umbra-color),
  19: f-get-box-shadow(0, 9, 12, -6, $box-shadow-umbra-color),
  20: f-get-box-shadow(0, 10, 13, -6, $box-shadow-umbra-color),
  21: f-get-box-shadow(0, 10, 13, -6, $box-shadow-umbra-color),
  22: f-get-box-shadow(0, 10, 14, -6, $box-shadow-umbra-color),
  23: f-get-box-shadow(0, 11, 14, -7, $box-shadow-umbra-color),
  24: f-get-box-shadow(0, 11, 15, -7, $box-shadow-umbra-color),
);

$box-shadow-penumbra-map: (
  0: f-get-box-shadow(0, 0, 0, 0, $box-shadow-penumbra-color),
  1: f-get-box-shadow(0, 1, 1, 0, $box-shadow-penumbra-color),
  2: f-get-box-shadow(0, 2, 2, 0, $box-shadow-penumbra-color),
  3: f-get-box-shadow(0, 3, 4, 0, $box-shadow-penumbra-color),
  4: f-get-box-shadow(0, 4, 5, 0, $box-shadow-penumbra-color),
  5: f-get-box-shadow(0, 5, 8, 0, $box-shadow-penumbra-color),
  6: f-get-box-shadow(0, 6, 10, 0, $box-shadow-penumbra-color),
  7: f-get-box-shadow(0, 7, 10, 1, $box-shadow-penumbra-color),
  8: f-get-box-shadow(0, 8, 10, 1, $box-shadow-penumbra-color),
  9: f-get-box-shadow(0, 9, 12, 1, $box-shadow-penumbra-color),
  10: f-get-box-shadow(0, 10, 14, 1, $box-shadow-penumbra-color),
  11: f-get-box-shadow(0, 11, 15, 1, $box-shadow-penumbra-color),
  12: f-get-box-shadow(0, 12, 17, 2, $box-shadow-penumbra-color),
  13: f-get-box-shadow(0, 13, 19, 2, $box-shadow-penumbra-color),
  14: f-get-box-shadow(0, 14, 21, 2, $box-shadow-penumbra-color),
  15: f-get-box-shadow(0, 15, 22, 2, $box-shadow-penumbra-color),
  16: f-get-box-shadow(0, 16, 24, 2, $box-shadow-penumbra-color),
  17: f-get-box-shadow(0, 17, 26, 2, $box-shadow-penumbra-color),
  18: f-get-box-shadow(0, 18, 28, 2, $box-shadow-penumbra-color),
  19: f-get-box-shadow(0, 19, 29, 2, $box-shadow-penumbra-color),
  20: f-get-box-shadow(0, 20, 31, 3, $box-shadow-penumbra-color),
  21: f-get-box-shadow(0, 21, 33, 3, $box-shadow-penumbra-color),
  22: f-get-box-shadow(0, 22, 35, 3, $box-shadow-penumbra-color),
  23: f-get-box-shadow(0, 23, 36, 3, $box-shadow-penumbra-color),
  24: f-get-box-shadow(0, 24, 38, 3, $box-shadow-penumbra-color)
);

$box-shadow-ambient-map: (
  0: f-get-box-shadow(0, 0, 0, 0, $box-shadow-ambient-color),
  1: f-get-box-shadow(0, 1, 3, 0, $box-shadow-ambient-color),
  2: f-get-box-shadow(0, 1, 5, 0, $box-shadow-ambient-color),
  3: f-get-box-shadow(0, 1, 8, 0, $box-shadow-ambient-color),
  4: f-get-box-shadow(0, 1, 10, 0, $box-shadow-ambient-color),
  5: f-get-box-shadow(0, 1, 14, 0, $box-shadow-ambient-color),
  6: f-get-box-shadow(0, 1, 18, 0, $box-shadow-ambient-color),
  7: f-get-box-shadow(0, 2, 16, 1, $box-shadow-ambient-color),
  8: f-get-box-shadow(0, 3, 14, 2, $box-shadow-ambient-color),
  9: f-get-box-shadow(0, 3, 16, 2, $box-shadow-ambient-color),
  10: f-get-box-shadow(0, 4, 18, 3, $box-shadow-ambient-color),
  11: f-get-box-shadow(0, 4, 20, 3, $box-shadow-ambient-color),
  12: f-get-box-shadow(0, 5, 22, 4, $box-shadow-ambient-color),
  13: f-get-box-shadow(0, 5, 24, 4, $box-shadow-ambient-color),
  14: f-get-box-shadow(0, 5, 26, 4, $box-shadow-ambient-color),
  15: f-get-box-shadow(0, 6, 28, 5, $box-shadow-ambient-color),
  16: f-get-box-shadow(0, 6, 30, 5, $box-shadow-ambient-color),
  17: f-get-box-shadow(0, 6, 32, 5, $box-shadow-ambient-color),
  18: f-get-box-shadow(0, 7, 34, 6, $box-shadow-ambient-color),
  19: f-get-box-shadow(0, 7, 36, 6, $box-shadow-ambient-color),
  20: f-get-box-shadow(0, 8, 38, 7, $box-shadow-ambient-color),
  21: f-get-box-shadow(0, 8, 40, 7, $box-shadow-ambient-color),
  22: f-get-box-shadow(0, 8, 42, 7, $box-shadow-ambient-color),
  23: f-get-box-shadow(0, 9, 44, 8, $box-shadow-ambient-color),
  24: f-get-box-shadow(0, 9, 46, 8, $box-shadow-ambient-color)
);

@mixin m-box-shadow($z-index, $important: false) {
  box-shadow: map-get($box-shadow-umbra-map, $z-index), map-get($box-shadow-penumbra-map, $z-index), map-get($box-shadow-ambient-map, $z-index) if($important, !important, null);
}

@mixin m-box-shadow-transition($duration: 280ms, $easing: cubic-bezier(.4, 0, .2, 1)) {
  transition: box-shadow $duration $easing;
  will-change: box-shadow;
}
